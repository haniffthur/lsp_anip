Tools yang dibutuhkan 
1. Xampp
2. VSCode
3. Composser
4. git (opsional)
5. Download Argon Dashboard 3 (taro di public) (template)
6. Download FontAwesome (taro di public)
5. Clone Github
6. fix php.ini
   (extensionzip, extensiongd)
7. Composer update or install


Yang harus gua lakuin pas lsp

1. Set Up database di migrate 

php artisan make:migrate create_menu_table
php artisan make:migrate create_meja_table
php artisan make:migrate create_pelanggan_table
php artisan make:migrate create_transaksi_table
php artisan make:migrate create_pesanan_table

<!--User-->
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('username')->unique();
            $table->string('password');
            $table->string('role');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};
<!--menu-->
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    
    public function up(): void
    {
        Schema::create('menu', function (Blueprint $table) {
            $table->id();
            $table->string('nama_menu');
            $table->integer('harga');
            $table->timestamps();
            $table->softDeletes();
        });
    }
    public function down(): void
    {
        Schema::dropIfExists('menu');
    }
};

<!--meja-->
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('meja', function (Blueprint $table) {
            $table->id();
            $table->integer('no_meja');
            $table->string('status');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('meja');
    }
};

<!--pelanggan-->
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('pelanggan', function (Blueprint $table) {
            $table->id();
            $table->string('nama_pelanggan');
            $table->string('jenis_kelamin')->nullable();
            $table->string('no_hp')->nullable();
            $table->longText('alamat')->nullable();
            $table->longText('status')->nullable();
            $table->bigInteger('id_meja')->unsigned()->nullable();
            $table->timestamps();

            $table->foreign('id_meja')->references('id')->on('meja');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('pelanggan');
    }
};


<!--transaksi-->
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('transaksi', function (Blueprint $table) {
            $table->id();
            $table->bigInteger('id_pelanggan')->unsigned();
            $table->integer('total');
            $table->integer('bayar');
            $table->timestamps();

            $table->foreign('id_pelanggan')->references('id')->on('pelanggan');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('transaksi');
    }
};


<!--pesanan-->
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('pesanan', function (Blueprint $table) {
            $table->id();
            $table->bigInteger('id_menu')->unsigned();
            $table->bigInteger('id_pelanggan')->unsigned();
            $table->bigInteger('id_user')->unsigned();
            $table->integer('jumlah');
            $table->timestamps();

            $table->foreign('id_menu')->references('id')->on('menu');
            $table->foreign('id_pelanggan')->references('id')->on('pelanggan');
            $table->foreign('id_user')->references('id')->on('users');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('pesanan');
    }
};



<!--Tambahin Seeder-->
namespace Database\Seeders;

// use Illuminate\Database\Console\Seeds\WithoutModelEvents;

use App\Models\User;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // \App\Models\User::factory(10)->create();

        // \App\Models\User::factory()->create([
        //     'name' => 'Test User',
        //     'email' => 'test@example.com',
        // ]);

        $users = [
            [
                'username' => 'Admin',
                'password' => bcrypt('admin123'),
                'role' => 'ADMIN'
            ],
            [
                'username' => 'Waiter',
                'password' => bcrypt('waiter123'),
                'role' => 'WAITER'
            ],
            [
                'username' => 'Kasir',
                'password' => bcrypt('kasir123'),
                'role' => 'KASIR'
            ],
            [
                'username' => 'Owner',
                'password' => bcrypt('owner123'),
                'role' => 'OWNER'
            ]
        ];

        foreach ($users as $key => $value) {
            User::create($value);
        }
    }
}

2.SetUp Models 

<!--Meja-->

class Meja extends Model
{
    use HasFactory;

    protected $table = 'meja';

    protected $fillable = [
        'no_meja',
        'status',
    ];

    protected $hidden = [];

    public function pelanggan()
    {
        return $this->hasOne(Pelanggan::class, 'id_meja', 'id');
    }
}

<!--Menu-->
class Menu extends Model
{
    use HasFactory, SoftDeletes;

    protected $table = 'menu';

    protected $fillable = [
        'nama_menu',
        'harga',
    ];

    protected $hidden = [];

    public function pesanan()
    {
        return $this->hasMany(Pesanan::class, 'id_menu', 'id');
    }
}

<!--Pelanggan-->
class Pelanggan extends Model
{
    use HasFactory;

    protected $table = 'pelanggan';

    protected $fillable = [
        'nama_pelanggan',
        'jenis_kelamin',
        'no_hp',
        'alamat',
        'status',
        'id_meja'
    ];

    protected $hidden = [];

    public function meja()
    {
        return $this->belongsTo(Meja::class, 'id_meja', 'id');
    }
}

<!--Pesanan-->
class Pesanan extends Model
{
    use HasFactory;

    protected $table = 'pesanan';

    protected $fillable = [
        'id_menu',
        'id_pelanggan',
        'id_user',
        'jumlah'
    ];

    protected $hidden = [];

    public function menu()
    {
        return $this->belongsTo(Menu::class, 'id_menu', 'id')->withTrashed();
    }
}

<!--Transaksi-->
class Transaksi extends Model
{
    use HasFactory;

    protected $table = 'transaksi';

    protected $fillable = [
        'id_pelanggan',
        'total',
        'bayar',
    ];

    protected $hidden = [];
}

<!--User-->
class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'username',
        'password',
        'role',
    ];



    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];
}
